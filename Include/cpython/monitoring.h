#ifndef Py_CPYTHON_MONITORING_H
#  error "this header file must not be included directly"
#endif


typedef struct _PyMonitoringState {
    uint8_t active;
    uint8_t opaque;
} PyMonitoringState;


PyAPI_FUNC(void)
PyMonitoring_EnterScope(PyMonitoringState *state_array, uint64_t *version,
                         const uint8_t *event_types, uint32_t length);

PyAPI_FUNC(void)
PyMonitoring_ExitScope(void);

/* Each function to raise a monitoring event has:
 * - a declaration of a private function with the functionality
 * - a static inline wrapper that calls the private function if monitoring
 *   is active.
 *
 * To cut down, these are generated by Argument Clinic.
 * Run `make clinic` to regenerate.
 */

#define _PYMONITORING_IF_ACTIVE(STATE, X)  \
    if ((STATE)->active) { \
        return (X); \
    } \
    else { \
        return 0; \
    }

/*[python input]
from textwrap import dedent
arg_types = {
    'state': 'PyMonitoringState *',
    'codelike': 'PyObject *',
    'offset': 'int',
    'retval': 'PyObject *',
    'callable': 'PyObject *',
    'arg0': 'PyObject *',
    'lineno': 'int',
    'target_offset': 'PyObject *',
    'exception': 'PyObject *',
}
for name, *args in (
    ('PyMonitoring_FirePyStartEvent', 'state', 'codelike', 'offset'),
    ('PyMonitoring_FirePyResumeEvent', 'state', 'codelike', 'offset'),
    ('PyMonitoring_FirePyReturnEvent', 'state', 'codelike', 'offset', 'retval'),
    ('PyMonitoring_FirePyYieldEvent', 'state', 'codelike', 'offset', 'retval'),
    ('PyMonitoring_FireCallEvent', 'state', 'codelike', 'offset', 'callable', 'arg0'),
    ('PyMonitoring_FireLineEvent', 'state', 'codelike', 'offset', 'lineno'),
    ('PyMonitoring_FireJumpEvent', 'state', 'codelike', 'offset', 'target_offset'),
    ('PyMonitoring_FireBranchEvent', 'state', 'codelike', 'offset', 'target_offset'),
    ('PyMonitoring_FireCReturnEvent', 'state', 'codelike', 'offset', 'retval'),
    ('PyMonitoring_FirePyThrowEvent', 'state', 'codelike', 'offset', 'exception'),
    ('PyMonitoring_FireRaiseEvent', 'state', 'codelike', 'offset', 'exception'),
    ('PyMonitoring_FireReraiseEvent', 'state', 'codelike', 'offset', 'exception'),
    ('PyMonitoring_FireExceptionHandledEvent', 'state', 'codelike', 'offset', 'exception'),
    ('PyMonitoring_FireCRaiseEvent', 'state', 'codelike', 'offset', 'exception'),
    ('PyMonitoring_FirePyUnwindEvent', 'state', 'codelike', 'offset', 'exception'),
    ('PyMonitoring_FireStopIterationEvent', 'state', 'codelike', 'offset', 'exception'),
):
    arg_names = ', '.join(args)
    args_with_types = ', '.join(f'{arg_types[a]} {a}' for a in args)
    print(dedent(f'''
        PyAPI_FUNC(int)
        _{name}({args_with_types});

        static inline int
        {name}({args_with_types})
        {{
            _PYMONITORING_IF_ACTIVE(
                state,
                _{name}({arg_names}));
        }}
    '''))
[python start generated code]*/

PyAPI_FUNC(int)
_PyMonitoring_FirePyStartEvent(PyMonitoringState * state, PyObject * codelike, int offset);

static inline int
PyMonitoring_FirePyStartEvent(PyMonitoringState * state, PyObject * codelike, int offset)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FirePyStartEvent(state, codelike, offset));
}


PyAPI_FUNC(int)
_PyMonitoring_FirePyResumeEvent(PyMonitoringState * state, PyObject * codelike, int offset);

static inline int
PyMonitoring_FirePyResumeEvent(PyMonitoringState * state, PyObject * codelike, int offset)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FirePyResumeEvent(state, codelike, offset));
}


PyAPI_FUNC(int)
_PyMonitoring_FirePyReturnEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * retval);

static inline int
PyMonitoring_FirePyReturnEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * retval)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FirePyReturnEvent(state, codelike, offset, retval));
}


PyAPI_FUNC(int)
_PyMonitoring_FirePyYieldEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * retval);

static inline int
PyMonitoring_FirePyYieldEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * retval)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FirePyYieldEvent(state, codelike, offset, retval));
}


PyAPI_FUNC(int)
_PyMonitoring_FireCallEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * callable, PyObject * arg0);

static inline int
PyMonitoring_FireCallEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * callable, PyObject * arg0)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireCallEvent(state, codelike, offset, callable, arg0));
}


PyAPI_FUNC(int)
_PyMonitoring_FireLineEvent(PyMonitoringState * state, PyObject * codelike, int offset, int lineno);

static inline int
PyMonitoring_FireLineEvent(PyMonitoringState * state, PyObject * codelike, int offset, int lineno)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireLineEvent(state, codelike, offset, lineno));
}


PyAPI_FUNC(int)
_PyMonitoring_FireJumpEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * target_offset);

static inline int
PyMonitoring_FireJumpEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * target_offset)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireJumpEvent(state, codelike, offset, target_offset));
}


PyAPI_FUNC(int)
_PyMonitoring_FireBranchEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * target_offset);

static inline int
PyMonitoring_FireBranchEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * target_offset)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireBranchEvent(state, codelike, offset, target_offset));
}


PyAPI_FUNC(int)
_PyMonitoring_FireCReturnEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * retval);

static inline int
PyMonitoring_FireCReturnEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * retval)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireCReturnEvent(state, codelike, offset, retval));
}


PyAPI_FUNC(int)
_PyMonitoring_FirePyThrowEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception);

static inline int
PyMonitoring_FirePyThrowEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FirePyThrowEvent(state, codelike, offset, exception));
}


PyAPI_FUNC(int)
_PyMonitoring_FireRaiseEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception);

static inline int
PyMonitoring_FireRaiseEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireRaiseEvent(state, codelike, offset, exception));
}


PyAPI_FUNC(int)
_PyMonitoring_FireReraiseEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception);

static inline int
PyMonitoring_FireReraiseEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireReraiseEvent(state, codelike, offset, exception));
}


PyAPI_FUNC(int)
_PyMonitoring_FireExceptionHandledEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception);

static inline int
PyMonitoring_FireExceptionHandledEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireExceptionHandledEvent(state, codelike, offset, exception));
}


PyAPI_FUNC(int)
_PyMonitoring_FireCRaiseEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception);

static inline int
PyMonitoring_FireCRaiseEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireCRaiseEvent(state, codelike, offset, exception));
}


PyAPI_FUNC(int)
_PyMonitoring_FirePyUnwindEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception);

static inline int
PyMonitoring_FirePyUnwindEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FirePyUnwindEvent(state, codelike, offset, exception));
}


PyAPI_FUNC(int)
_PyMonitoring_FireStopIterationEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception);

static inline int
PyMonitoring_FireStopIterationEvent(PyMonitoringState * state, PyObject * codelike, int offset, PyObject * exception)
{
    _PYMONITORING_IF_ACTIVE(
        state,
        _PyMonitoring_FireStopIterationEvent(state, codelike, offset, exception));
}

/*[python end generated code: output=ebff1d464db8fda9 input=de630f5baa1dff0e]*/


#undef _PYMONITORING_IF_ACTIVE
